'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tablelog_date As log_dateDataTable
    
    Private tablelog_time As log_timeDataTable
    
    Private tablelog_s_sitename As log_s_sitenameDataTable
    
    Private tablelog_s_computername As log_s_computernameDataTable
    
    Private tablelog_s_ip As log_s_ipDataTable
    
    Private tablelog_cs_method As log_cs_methodDataTable
    
    Private tablelog_cs_uri_stem As log_cs_uri_stemDataTable
    
    Private tablelog_cs_uri_query As log_cs_uri_queryDataTable
    
    Private tablelog_s_port As log_s_portDataTable
    
    Private tablelog_cs_username As log_cs_usernameDataTable
    
    Private tablelog_c_ip As log_c_ipDataTable
    
    Private tablelog_cs_version As log_cs_versionDataTable
    
    Private tablelog_cs_User_Agent As log_cs_User_AgentDataTable
    
    Private tablelog_cs_Cookie As log_cs_CookieDataTable
    
    Private tablelog_cs_Referer As log_cs_RefererDataTable
    
    Private tablelog_cs_host As log_cs_hostDataTable
    
    Private tablelog_sc_status As log_sc_statusDataTable
    
    Private tablelog_sc_substatus As log_sc_substatusDataTable
    
    Private tablelog_sc_win32_status As log_sc_win32_statusDataTable
    
    Private tablelog_sc_bytes As log_sc_bytesDataTable
    
    Private tablelog_cs_bytes As log_cs_bytesDataTable
    
    Private tablelog_time_taken As log_time_takenDataTable
    
    Private tablelog_errors As log_errorsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("log_date")) Is Nothing) Then
                Me.Tables.Add(New log_dateDataTable(ds.Tables("log_date")))
            End If
            If (Not (ds.Tables("log_time")) Is Nothing) Then
                Me.Tables.Add(New log_timeDataTable(ds.Tables("log_time")))
            End If
            If (Not (ds.Tables("log_s_sitename")) Is Nothing) Then
                Me.Tables.Add(New log_s_sitenameDataTable(ds.Tables("log_s_sitename")))
            End If
            If (Not (ds.Tables("log_s_computername")) Is Nothing) Then
                Me.Tables.Add(New log_s_computernameDataTable(ds.Tables("log_s_computername")))
            End If
            If (Not (ds.Tables("log_s_ip")) Is Nothing) Then
                Me.Tables.Add(New log_s_ipDataTable(ds.Tables("log_s_ip")))
            End If
            If (Not (ds.Tables("log_cs_method")) Is Nothing) Then
                Me.Tables.Add(New log_cs_methodDataTable(ds.Tables("log_cs_method")))
            End If
            If (Not (ds.Tables("log_cs_uri_stem")) Is Nothing) Then
                Me.Tables.Add(New log_cs_uri_stemDataTable(ds.Tables("log_cs_uri_stem")))
            End If
            If (Not (ds.Tables("log_cs_uri_query")) Is Nothing) Then
                Me.Tables.Add(New log_cs_uri_queryDataTable(ds.Tables("log_cs_uri_query")))
            End If
            If (Not (ds.Tables("log_s_port")) Is Nothing) Then
                Me.Tables.Add(New log_s_portDataTable(ds.Tables("log_s_port")))
            End If
            If (Not (ds.Tables("log_cs_username")) Is Nothing) Then
                Me.Tables.Add(New log_cs_usernameDataTable(ds.Tables("log_cs_username")))
            End If
            If (Not (ds.Tables("log_c_ip")) Is Nothing) Then
                Me.Tables.Add(New log_c_ipDataTable(ds.Tables("log_c_ip")))
            End If
            If (Not (ds.Tables("log_cs_version")) Is Nothing) Then
                Me.Tables.Add(New log_cs_versionDataTable(ds.Tables("log_cs_version")))
            End If
            If (Not (ds.Tables("log_cs_User_Agent")) Is Nothing) Then
                Me.Tables.Add(New log_cs_User_AgentDataTable(ds.Tables("log_cs_User_Agent")))
            End If
            If (Not (ds.Tables("log_cs_Cookie")) Is Nothing) Then
                Me.Tables.Add(New log_cs_CookieDataTable(ds.Tables("log_cs_Cookie")))
            End If
            If (Not (ds.Tables("log_cs_Referer")) Is Nothing) Then
                Me.Tables.Add(New log_cs_RefererDataTable(ds.Tables("log_cs_Referer")))
            End If
            If (Not (ds.Tables("log_cs_host")) Is Nothing) Then
                Me.Tables.Add(New log_cs_hostDataTable(ds.Tables("log_cs_host")))
            End If
            If (Not (ds.Tables("log_sc_status")) Is Nothing) Then
                Me.Tables.Add(New log_sc_statusDataTable(ds.Tables("log_sc_status")))
            End If
            If (Not (ds.Tables("log_sc_substatus")) Is Nothing) Then
                Me.Tables.Add(New log_sc_substatusDataTable(ds.Tables("log_sc_substatus")))
            End If
            If (Not (ds.Tables("log_sc_win32_status")) Is Nothing) Then
                Me.Tables.Add(New log_sc_win32_statusDataTable(ds.Tables("log_sc_win32_status")))
            End If
            If (Not (ds.Tables("log_sc_bytes")) Is Nothing) Then
                Me.Tables.Add(New log_sc_bytesDataTable(ds.Tables("log_sc_bytes")))
            End If
            If (Not (ds.Tables("log_cs_bytes")) Is Nothing) Then
                Me.Tables.Add(New log_cs_bytesDataTable(ds.Tables("log_cs_bytes")))
            End If
            If (Not (ds.Tables("log_time_taken")) Is Nothing) Then
                Me.Tables.Add(New log_time_takenDataTable(ds.Tables("log_time_taken")))
            End If
            If (Not (ds.Tables("log_errors")) Is Nothing) Then
                Me.Tables.Add(New log_errorsDataTable(ds.Tables("log_errors")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_date As log_dateDataTable
        Get
            Return Me.tablelog_date
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_time As log_timeDataTable
        Get
            Return Me.tablelog_time
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_s_sitename As log_s_sitenameDataTable
        Get
            Return Me.tablelog_s_sitename
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_s_computername As log_s_computernameDataTable
        Get
            Return Me.tablelog_s_computername
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_s_ip As log_s_ipDataTable
        Get
            Return Me.tablelog_s_ip
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_method As log_cs_methodDataTable
        Get
            Return Me.tablelog_cs_method
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_uri_stem As log_cs_uri_stemDataTable
        Get
            Return Me.tablelog_cs_uri_stem
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_uri_query As log_cs_uri_queryDataTable
        Get
            Return Me.tablelog_cs_uri_query
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_s_port As log_s_portDataTable
        Get
            Return Me.tablelog_s_port
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_username As log_cs_usernameDataTable
        Get
            Return Me.tablelog_cs_username
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_c_ip As log_c_ipDataTable
        Get
            Return Me.tablelog_c_ip
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_version As log_cs_versionDataTable
        Get
            Return Me.tablelog_cs_version
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_User_Agent As log_cs_User_AgentDataTable
        Get
            Return Me.tablelog_cs_User_Agent
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_Cookie As log_cs_CookieDataTable
        Get
            Return Me.tablelog_cs_Cookie
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_Referer As log_cs_RefererDataTable
        Get
            Return Me.tablelog_cs_Referer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_host As log_cs_hostDataTable
        Get
            Return Me.tablelog_cs_host
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_sc_status As log_sc_statusDataTable
        Get
            Return Me.tablelog_sc_status
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_sc_substatus As log_sc_substatusDataTable
        Get
            Return Me.tablelog_sc_substatus
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_sc_win32_status As log_sc_win32_statusDataTable
        Get
            Return Me.tablelog_sc_win32_status
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_sc_bytes As log_sc_bytesDataTable
        Get
            Return Me.tablelog_sc_bytes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_cs_bytes As log_cs_bytesDataTable
        Get
            Return Me.tablelog_cs_bytes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_time_taken As log_time_takenDataTable
        Get
            Return Me.tablelog_time_taken
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_errors As log_errorsDataTable
        Get
            Return Me.tablelog_errors
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("log_date")) Is Nothing) Then
            Me.Tables.Add(New log_dateDataTable(ds.Tables("log_date")))
        End If
        If (Not (ds.Tables("log_time")) Is Nothing) Then
            Me.Tables.Add(New log_timeDataTable(ds.Tables("log_time")))
        End If
        If (Not (ds.Tables("log_s_sitename")) Is Nothing) Then
            Me.Tables.Add(New log_s_sitenameDataTable(ds.Tables("log_s_sitename")))
        End If
        If (Not (ds.Tables("log_s_computername")) Is Nothing) Then
            Me.Tables.Add(New log_s_computernameDataTable(ds.Tables("log_s_computername")))
        End If
        If (Not (ds.Tables("log_s_ip")) Is Nothing) Then
            Me.Tables.Add(New log_s_ipDataTable(ds.Tables("log_s_ip")))
        End If
        If (Not (ds.Tables("log_cs_method")) Is Nothing) Then
            Me.Tables.Add(New log_cs_methodDataTable(ds.Tables("log_cs_method")))
        End If
        If (Not (ds.Tables("log_cs_uri_stem")) Is Nothing) Then
            Me.Tables.Add(New log_cs_uri_stemDataTable(ds.Tables("log_cs_uri_stem")))
        End If
        If (Not (ds.Tables("log_cs_uri_query")) Is Nothing) Then
            Me.Tables.Add(New log_cs_uri_queryDataTable(ds.Tables("log_cs_uri_query")))
        End If
        If (Not (ds.Tables("log_s_port")) Is Nothing) Then
            Me.Tables.Add(New log_s_portDataTable(ds.Tables("log_s_port")))
        End If
        If (Not (ds.Tables("log_cs_username")) Is Nothing) Then
            Me.Tables.Add(New log_cs_usernameDataTable(ds.Tables("log_cs_username")))
        End If
        If (Not (ds.Tables("log_c_ip")) Is Nothing) Then
            Me.Tables.Add(New log_c_ipDataTable(ds.Tables("log_c_ip")))
        End If
        If (Not (ds.Tables("log_cs_version")) Is Nothing) Then
            Me.Tables.Add(New log_cs_versionDataTable(ds.Tables("log_cs_version")))
        End If
        If (Not (ds.Tables("log_cs_User_Agent")) Is Nothing) Then
            Me.Tables.Add(New log_cs_User_AgentDataTable(ds.Tables("log_cs_User_Agent")))
        End If
        If (Not (ds.Tables("log_cs_Cookie")) Is Nothing) Then
            Me.Tables.Add(New log_cs_CookieDataTable(ds.Tables("log_cs_Cookie")))
        End If
        If (Not (ds.Tables("log_cs_Referer")) Is Nothing) Then
            Me.Tables.Add(New log_cs_RefererDataTable(ds.Tables("log_cs_Referer")))
        End If
        If (Not (ds.Tables("log_cs_host")) Is Nothing) Then
            Me.Tables.Add(New log_cs_hostDataTable(ds.Tables("log_cs_host")))
        End If
        If (Not (ds.Tables("log_sc_status")) Is Nothing) Then
            Me.Tables.Add(New log_sc_statusDataTable(ds.Tables("log_sc_status")))
        End If
        If (Not (ds.Tables("log_sc_substatus")) Is Nothing) Then
            Me.Tables.Add(New log_sc_substatusDataTable(ds.Tables("log_sc_substatus")))
        End If
        If (Not (ds.Tables("log_sc_win32_status")) Is Nothing) Then
            Me.Tables.Add(New log_sc_win32_statusDataTable(ds.Tables("log_sc_win32_status")))
        End If
        If (Not (ds.Tables("log_sc_bytes")) Is Nothing) Then
            Me.Tables.Add(New log_sc_bytesDataTable(ds.Tables("log_sc_bytes")))
        End If
        If (Not (ds.Tables("log_cs_bytes")) Is Nothing) Then
            Me.Tables.Add(New log_cs_bytesDataTable(ds.Tables("log_cs_bytes")))
        End If
        If (Not (ds.Tables("log_time_taken")) Is Nothing) Then
            Me.Tables.Add(New log_time_takenDataTable(ds.Tables("log_time_taken")))
        End If
        If (Not (ds.Tables("log_errors")) Is Nothing) Then
            Me.Tables.Add(New log_errorsDataTable(ds.Tables("log_errors")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablelog_date = CType(Me.Tables("log_date"),log_dateDataTable)
        If (Not (Me.tablelog_date) Is Nothing) Then
            Me.tablelog_date.InitVars
        End If
        Me.tablelog_time = CType(Me.Tables("log_time"),log_timeDataTable)
        If (Not (Me.tablelog_time) Is Nothing) Then
            Me.tablelog_time.InitVars
        End If
        Me.tablelog_s_sitename = CType(Me.Tables("log_s_sitename"),log_s_sitenameDataTable)
        If (Not (Me.tablelog_s_sitename) Is Nothing) Then
            Me.tablelog_s_sitename.InitVars
        End If
        Me.tablelog_s_computername = CType(Me.Tables("log_s_computername"),log_s_computernameDataTable)
        If (Not (Me.tablelog_s_computername) Is Nothing) Then
            Me.tablelog_s_computername.InitVars
        End If
        Me.tablelog_s_ip = CType(Me.Tables("log_s_ip"),log_s_ipDataTable)
        If (Not (Me.tablelog_s_ip) Is Nothing) Then
            Me.tablelog_s_ip.InitVars
        End If
        Me.tablelog_cs_method = CType(Me.Tables("log_cs_method"),log_cs_methodDataTable)
        If (Not (Me.tablelog_cs_method) Is Nothing) Then
            Me.tablelog_cs_method.InitVars
        End If
        Me.tablelog_cs_uri_stem = CType(Me.Tables("log_cs_uri_stem"),log_cs_uri_stemDataTable)
        If (Not (Me.tablelog_cs_uri_stem) Is Nothing) Then
            Me.tablelog_cs_uri_stem.InitVars
        End If
        Me.tablelog_cs_uri_query = CType(Me.Tables("log_cs_uri_query"),log_cs_uri_queryDataTable)
        If (Not (Me.tablelog_cs_uri_query) Is Nothing) Then
            Me.tablelog_cs_uri_query.InitVars
        End If
        Me.tablelog_s_port = CType(Me.Tables("log_s_port"),log_s_portDataTable)
        If (Not (Me.tablelog_s_port) Is Nothing) Then
            Me.tablelog_s_port.InitVars
        End If
        Me.tablelog_cs_username = CType(Me.Tables("log_cs_username"),log_cs_usernameDataTable)
        If (Not (Me.tablelog_cs_username) Is Nothing) Then
            Me.tablelog_cs_username.InitVars
        End If
        Me.tablelog_c_ip = CType(Me.Tables("log_c_ip"),log_c_ipDataTable)
        If (Not (Me.tablelog_c_ip) Is Nothing) Then
            Me.tablelog_c_ip.InitVars
        End If
        Me.tablelog_cs_version = CType(Me.Tables("log_cs_version"),log_cs_versionDataTable)
        If (Not (Me.tablelog_cs_version) Is Nothing) Then
            Me.tablelog_cs_version.InitVars
        End If
        Me.tablelog_cs_User_Agent = CType(Me.Tables("log_cs_User_Agent"),log_cs_User_AgentDataTable)
        If (Not (Me.tablelog_cs_User_Agent) Is Nothing) Then
            Me.tablelog_cs_User_Agent.InitVars
        End If
        Me.tablelog_cs_Cookie = CType(Me.Tables("log_cs_Cookie"),log_cs_CookieDataTable)
        If (Not (Me.tablelog_cs_Cookie) Is Nothing) Then
            Me.tablelog_cs_Cookie.InitVars
        End If
        Me.tablelog_cs_Referer = CType(Me.Tables("log_cs_Referer"),log_cs_RefererDataTable)
        If (Not (Me.tablelog_cs_Referer) Is Nothing) Then
            Me.tablelog_cs_Referer.InitVars
        End If
        Me.tablelog_cs_host = CType(Me.Tables("log_cs_host"),log_cs_hostDataTable)
        If (Not (Me.tablelog_cs_host) Is Nothing) Then
            Me.tablelog_cs_host.InitVars
        End If
        Me.tablelog_sc_status = CType(Me.Tables("log_sc_status"),log_sc_statusDataTable)
        If (Not (Me.tablelog_sc_status) Is Nothing) Then
            Me.tablelog_sc_status.InitVars
        End If
        Me.tablelog_sc_substatus = CType(Me.Tables("log_sc_substatus"),log_sc_substatusDataTable)
        If (Not (Me.tablelog_sc_substatus) Is Nothing) Then
            Me.tablelog_sc_substatus.InitVars
        End If
        Me.tablelog_sc_win32_status = CType(Me.Tables("log_sc_win32_status"),log_sc_win32_statusDataTable)
        If (Not (Me.tablelog_sc_win32_status) Is Nothing) Then
            Me.tablelog_sc_win32_status.InitVars
        End If
        Me.tablelog_sc_bytes = CType(Me.Tables("log_sc_bytes"),log_sc_bytesDataTable)
        If (Not (Me.tablelog_sc_bytes) Is Nothing) Then
            Me.tablelog_sc_bytes.InitVars
        End If
        Me.tablelog_cs_bytes = CType(Me.Tables("log_cs_bytes"),log_cs_bytesDataTable)
        If (Not (Me.tablelog_cs_bytes) Is Nothing) Then
            Me.tablelog_cs_bytes.InitVars
        End If
        Me.tablelog_time_taken = CType(Me.Tables("log_time_taken"),log_time_takenDataTable)
        If (Not (Me.tablelog_time_taken) Is Nothing) Then
            Me.tablelog_time_taken.InitVars
        End If
        Me.tablelog_errors = CType(Me.Tables("log_errors"),log_errorsDataTable)
        If (Not (Me.tablelog_errors) Is Nothing) Then
            Me.tablelog_errors.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-ZA")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablelog_date = New log_dateDataTable
        Me.Tables.Add(Me.tablelog_date)
        Me.tablelog_time = New log_timeDataTable
        Me.Tables.Add(Me.tablelog_time)
        Me.tablelog_s_sitename = New log_s_sitenameDataTable
        Me.Tables.Add(Me.tablelog_s_sitename)
        Me.tablelog_s_computername = New log_s_computernameDataTable
        Me.Tables.Add(Me.tablelog_s_computername)
        Me.tablelog_s_ip = New log_s_ipDataTable
        Me.Tables.Add(Me.tablelog_s_ip)
        Me.tablelog_cs_method = New log_cs_methodDataTable
        Me.Tables.Add(Me.tablelog_cs_method)
        Me.tablelog_cs_uri_stem = New log_cs_uri_stemDataTable
        Me.Tables.Add(Me.tablelog_cs_uri_stem)
        Me.tablelog_cs_uri_query = New log_cs_uri_queryDataTable
        Me.Tables.Add(Me.tablelog_cs_uri_query)
        Me.tablelog_s_port = New log_s_portDataTable
        Me.Tables.Add(Me.tablelog_s_port)
        Me.tablelog_cs_username = New log_cs_usernameDataTable
        Me.Tables.Add(Me.tablelog_cs_username)
        Me.tablelog_c_ip = New log_c_ipDataTable
        Me.Tables.Add(Me.tablelog_c_ip)
        Me.tablelog_cs_version = New log_cs_versionDataTable
        Me.Tables.Add(Me.tablelog_cs_version)
        Me.tablelog_cs_User_Agent = New log_cs_User_AgentDataTable
        Me.Tables.Add(Me.tablelog_cs_User_Agent)
        Me.tablelog_cs_Cookie = New log_cs_CookieDataTable
        Me.Tables.Add(Me.tablelog_cs_Cookie)
        Me.tablelog_cs_Referer = New log_cs_RefererDataTable
        Me.Tables.Add(Me.tablelog_cs_Referer)
        Me.tablelog_cs_host = New log_cs_hostDataTable
        Me.Tables.Add(Me.tablelog_cs_host)
        Me.tablelog_sc_status = New log_sc_statusDataTable
        Me.Tables.Add(Me.tablelog_sc_status)
        Me.tablelog_sc_substatus = New log_sc_substatusDataTable
        Me.Tables.Add(Me.tablelog_sc_substatus)
        Me.tablelog_sc_win32_status = New log_sc_win32_statusDataTable
        Me.Tables.Add(Me.tablelog_sc_win32_status)
        Me.tablelog_sc_bytes = New log_sc_bytesDataTable
        Me.Tables.Add(Me.tablelog_sc_bytes)
        Me.tablelog_cs_bytes = New log_cs_bytesDataTable
        Me.Tables.Add(Me.tablelog_cs_bytes)
        Me.tablelog_time_taken = New log_time_takenDataTable
        Me.Tables.Add(Me.tablelog_time_taken)
        Me.tablelog_errors = New log_errorsDataTable
        Me.Tables.Add(Me.tablelog_errors)
    End Sub
    
    Private Function ShouldSerializelog_date() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_time() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_s_sitename() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_s_computername() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_s_ip() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_method() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_uri_stem() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_uri_query() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_s_port() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_username() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_c_ip() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_version() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_User_Agent() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_Cookie() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_Referer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_host() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_sc_status() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_sc_substatus() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_sc_win32_status() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_sc_bytes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_cs_bytes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_time_taken() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializelog_errors() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub log_dateRowChangeEventHandler(ByVal sender As Object, ByVal e As log_dateRowChangeEvent)
    
    Public Delegate Sub log_timeRowChangeEventHandler(ByVal sender As Object, ByVal e As log_timeRowChangeEvent)
    
    Public Delegate Sub log_s_sitenameRowChangeEventHandler(ByVal sender As Object, ByVal e As log_s_sitenameRowChangeEvent)
    
    Public Delegate Sub log_s_computernameRowChangeEventHandler(ByVal sender As Object, ByVal e As log_s_computernameRowChangeEvent)
    
    Public Delegate Sub log_s_ipRowChangeEventHandler(ByVal sender As Object, ByVal e As log_s_ipRowChangeEvent)
    
    Public Delegate Sub log_cs_methodRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_methodRowChangeEvent)
    
    Public Delegate Sub log_cs_uri_stemRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_uri_stemRowChangeEvent)
    
    Public Delegate Sub log_cs_uri_queryRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_uri_queryRowChangeEvent)
    
    Public Delegate Sub log_s_portRowChangeEventHandler(ByVal sender As Object, ByVal e As log_s_portRowChangeEvent)
    
    Public Delegate Sub log_cs_usernameRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_usernameRowChangeEvent)
    
    Public Delegate Sub log_c_ipRowChangeEventHandler(ByVal sender As Object, ByVal e As log_c_ipRowChangeEvent)
    
    Public Delegate Sub log_cs_versionRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_versionRowChangeEvent)
    
    Public Delegate Sub log_cs_User_AgentRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_User_AgentRowChangeEvent)
    
    Public Delegate Sub log_cs_CookieRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_CookieRowChangeEvent)
    
    Public Delegate Sub log_cs_RefererRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_RefererRowChangeEvent)
    
    Public Delegate Sub log_cs_hostRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_hostRowChangeEvent)
    
    Public Delegate Sub log_sc_statusRowChangeEventHandler(ByVal sender As Object, ByVal e As log_sc_statusRowChangeEvent)
    
    Public Delegate Sub log_sc_substatusRowChangeEventHandler(ByVal sender As Object, ByVal e As log_sc_substatusRowChangeEvent)
    
    Public Delegate Sub log_sc_win32_statusRowChangeEventHandler(ByVal sender As Object, ByVal e As log_sc_win32_statusRowChangeEvent)
    
    Public Delegate Sub log_sc_bytesRowChangeEventHandler(ByVal sender As Object, ByVal e As log_sc_bytesRowChangeEvent)
    
    Public Delegate Sub log_cs_bytesRowChangeEventHandler(ByVal sender As Object, ByVal e As log_cs_bytesRowChangeEvent)
    
    Public Delegate Sub log_time_takenRowChangeEventHandler(ByVal sender As Object, ByVal e As log_time_takenRowChangeEvent)
    
    Public Delegate Sub log_errorsRowChangeEventHandler(ByVal sender As Object, ByVal e As log_errorsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_dateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_date")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_dateRow
            Get
                Return CType(Me.Rows(index),log_dateRow)
            End Get
        End Property
        
        Public Event log_dateRowChanged As log_dateRowChangeEventHandler
        
        Public Event log_dateRowChanging As log_dateRowChangeEventHandler
        
        Public Event log_dateRowDeleted As log_dateRowChangeEventHandler
        
        Public Event log_dateRowDeleting As log_dateRowChangeEventHandler
        
        Public Overloads Sub Addlog_dateRow(ByVal row As log_dateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_dateRow(ByVal log_value As String, ByVal log_count As Integer) As log_dateRow
            Dim rowlog_dateRow As log_dateRow = CType(Me.NewRow,log_dateRow)
            rowlog_dateRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_dateRow)
            Return rowlog_dateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_dateDataTable = CType(MyBase.Clone,log_dateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_dateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_dateRow() As log_dateRow
            Return CType(Me.NewRow,log_dateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_dateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_dateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_dateRowChangedEvent) Is Nothing) Then
                RaiseEvent log_dateRowChanged(Me, New log_dateRowChangeEvent(CType(e.Row,log_dateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_dateRowChangingEvent) Is Nothing) Then
                RaiseEvent log_dateRowChanging(Me, New log_dateRowChangeEvent(CType(e.Row,log_dateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_dateRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_dateRowDeleted(Me, New log_dateRowChangeEvent(CType(e.Row,log_dateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_dateRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_dateRowDeleting(Me, New log_dateRowChangeEvent(CType(e.Row,log_dateRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_dateRow(ByVal row As log_dateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_dateRow
        Inherits DataRow
        
        Private tablelog_date As log_dateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_date = CType(Me.Table,log_dateDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_date.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_date.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_date.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_date.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_date.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_date.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_date.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_date.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_dateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_dateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_dateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_dateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_timeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_time")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_timeRow
            Get
                Return CType(Me.Rows(index),log_timeRow)
            End Get
        End Property
        
        Public Event log_timeRowChanged As log_timeRowChangeEventHandler
        
        Public Event log_timeRowChanging As log_timeRowChangeEventHandler
        
        Public Event log_timeRowDeleted As log_timeRowChangeEventHandler
        
        Public Event log_timeRowDeleting As log_timeRowChangeEventHandler
        
        Public Overloads Sub Addlog_timeRow(ByVal row As log_timeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_timeRow(ByVal log_value As String, ByVal log_count As Integer) As log_timeRow
            Dim rowlog_timeRow As log_timeRow = CType(Me.NewRow,log_timeRow)
            rowlog_timeRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_timeRow)
            Return rowlog_timeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_timeDataTable = CType(MyBase.Clone,log_timeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_timeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_timeRow() As log_timeRow
            Return CType(Me.NewRow,log_timeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_timeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_timeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_timeRowChangedEvent) Is Nothing) Then
                RaiseEvent log_timeRowChanged(Me, New log_timeRowChangeEvent(CType(e.Row,log_timeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_timeRowChangingEvent) Is Nothing) Then
                RaiseEvent log_timeRowChanging(Me, New log_timeRowChangeEvent(CType(e.Row,log_timeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_timeRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_timeRowDeleted(Me, New log_timeRowChangeEvent(CType(e.Row,log_timeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_timeRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_timeRowDeleting(Me, New log_timeRowChangeEvent(CType(e.Row,log_timeRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_timeRow(ByVal row As log_timeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_timeRow
        Inherits DataRow
        
        Private tablelog_time As log_timeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_time = CType(Me.Table,log_timeDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_time.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_time.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_time.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_time.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_time.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_time.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_time.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_time.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_timeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_timeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_timeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_timeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_sitenameDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_s_sitename")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_s_sitenameRow
            Get
                Return CType(Me.Rows(index),log_s_sitenameRow)
            End Get
        End Property
        
        Public Event log_s_sitenameRowChanged As log_s_sitenameRowChangeEventHandler
        
        Public Event log_s_sitenameRowChanging As log_s_sitenameRowChangeEventHandler
        
        Public Event log_s_sitenameRowDeleted As log_s_sitenameRowChangeEventHandler
        
        Public Event log_s_sitenameRowDeleting As log_s_sitenameRowChangeEventHandler
        
        Public Overloads Sub Addlog_s_sitenameRow(ByVal row As log_s_sitenameRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_s_sitenameRow(ByVal log_value As String, ByVal log_count As Integer) As log_s_sitenameRow
            Dim rowlog_s_sitenameRow As log_s_sitenameRow = CType(Me.NewRow,log_s_sitenameRow)
            rowlog_s_sitenameRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_s_sitenameRow)
            Return rowlog_s_sitenameRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_s_sitenameDataTable = CType(MyBase.Clone,log_s_sitenameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_s_sitenameDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_s_sitenameRow() As log_s_sitenameRow
            Return CType(Me.NewRow,log_s_sitenameRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_s_sitenameRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_s_sitenameRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_s_sitenameRowChangedEvent) Is Nothing) Then
                RaiseEvent log_s_sitenameRowChanged(Me, New log_s_sitenameRowChangeEvent(CType(e.Row,log_s_sitenameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_s_sitenameRowChangingEvent) Is Nothing) Then
                RaiseEvent log_s_sitenameRowChanging(Me, New log_s_sitenameRowChangeEvent(CType(e.Row,log_s_sitenameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_s_sitenameRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_s_sitenameRowDeleted(Me, New log_s_sitenameRowChangeEvent(CType(e.Row,log_s_sitenameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_s_sitenameRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_s_sitenameRowDeleting(Me, New log_s_sitenameRowChangeEvent(CType(e.Row,log_s_sitenameRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_s_sitenameRow(ByVal row As log_s_sitenameRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_sitenameRow
        Inherits DataRow
        
        Private tablelog_s_sitename As log_s_sitenameDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_s_sitename = CType(Me.Table,log_s_sitenameDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_sitename.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_sitename.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_sitename.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_sitename.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_sitename.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_s_sitename.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_sitename.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_s_sitename.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_sitenameRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_s_sitenameRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_s_sitenameRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_s_sitenameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_computernameDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_s_computername")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_s_computernameRow
            Get
                Return CType(Me.Rows(index),log_s_computernameRow)
            End Get
        End Property
        
        Public Event log_s_computernameRowChanged As log_s_computernameRowChangeEventHandler
        
        Public Event log_s_computernameRowChanging As log_s_computernameRowChangeEventHandler
        
        Public Event log_s_computernameRowDeleted As log_s_computernameRowChangeEventHandler
        
        Public Event log_s_computernameRowDeleting As log_s_computernameRowChangeEventHandler
        
        Public Overloads Sub Addlog_s_computernameRow(ByVal row As log_s_computernameRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_s_computernameRow(ByVal log_value As String, ByVal log_count As Integer) As log_s_computernameRow
            Dim rowlog_s_computernameRow As log_s_computernameRow = CType(Me.NewRow,log_s_computernameRow)
            rowlog_s_computernameRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_s_computernameRow)
            Return rowlog_s_computernameRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_s_computernameDataTable = CType(MyBase.Clone,log_s_computernameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_s_computernameDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_s_computernameRow() As log_s_computernameRow
            Return CType(Me.NewRow,log_s_computernameRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_s_computernameRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_s_computernameRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_s_computernameRowChangedEvent) Is Nothing) Then
                RaiseEvent log_s_computernameRowChanged(Me, New log_s_computernameRowChangeEvent(CType(e.Row,log_s_computernameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_s_computernameRowChangingEvent) Is Nothing) Then
                RaiseEvent log_s_computernameRowChanging(Me, New log_s_computernameRowChangeEvent(CType(e.Row,log_s_computernameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_s_computernameRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_s_computernameRowDeleted(Me, New log_s_computernameRowChangeEvent(CType(e.Row,log_s_computernameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_s_computernameRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_s_computernameRowDeleting(Me, New log_s_computernameRowChangeEvent(CType(e.Row,log_s_computernameRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_s_computernameRow(ByVal row As log_s_computernameRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_computernameRow
        Inherits DataRow
        
        Private tablelog_s_computername As log_s_computernameDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_s_computername = CType(Me.Table,log_s_computernameDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_computername.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_computername.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_computername.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_computername.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_computername.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_s_computername.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_computername.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_s_computername.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_computernameRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_s_computernameRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_s_computernameRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_s_computernameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_ipDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_s_ip")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_s_ipRow
            Get
                Return CType(Me.Rows(index),log_s_ipRow)
            End Get
        End Property
        
        Public Event log_s_ipRowChanged As log_s_ipRowChangeEventHandler
        
        Public Event log_s_ipRowChanging As log_s_ipRowChangeEventHandler
        
        Public Event log_s_ipRowDeleted As log_s_ipRowChangeEventHandler
        
        Public Event log_s_ipRowDeleting As log_s_ipRowChangeEventHandler
        
        Public Overloads Sub Addlog_s_ipRow(ByVal row As log_s_ipRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_s_ipRow(ByVal log_value As String, ByVal log_count As Integer) As log_s_ipRow
            Dim rowlog_s_ipRow As log_s_ipRow = CType(Me.NewRow,log_s_ipRow)
            rowlog_s_ipRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_s_ipRow)
            Return rowlog_s_ipRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_s_ipDataTable = CType(MyBase.Clone,log_s_ipDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_s_ipDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_s_ipRow() As log_s_ipRow
            Return CType(Me.NewRow,log_s_ipRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_s_ipRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_s_ipRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_s_ipRowChangedEvent) Is Nothing) Then
                RaiseEvent log_s_ipRowChanged(Me, New log_s_ipRowChangeEvent(CType(e.Row,log_s_ipRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_s_ipRowChangingEvent) Is Nothing) Then
                RaiseEvent log_s_ipRowChanging(Me, New log_s_ipRowChangeEvent(CType(e.Row,log_s_ipRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_s_ipRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_s_ipRowDeleted(Me, New log_s_ipRowChangeEvent(CType(e.Row,log_s_ipRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_s_ipRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_s_ipRowDeleting(Me, New log_s_ipRowChangeEvent(CType(e.Row,log_s_ipRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_s_ipRow(ByVal row As log_s_ipRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_ipRow
        Inherits DataRow
        
        Private tablelog_s_ip As log_s_ipDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_s_ip = CType(Me.Table,log_s_ipDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_ip.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_ip.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_ip.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_ip.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_ip.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_s_ip.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_ip.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_s_ip.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_ipRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_s_ipRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_s_ipRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_s_ipRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_methodDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_method")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_methodRow
            Get
                Return CType(Me.Rows(index),log_cs_methodRow)
            End Get
        End Property
        
        Public Event log_cs_methodRowChanged As log_cs_methodRowChangeEventHandler
        
        Public Event log_cs_methodRowChanging As log_cs_methodRowChangeEventHandler
        
        Public Event log_cs_methodRowDeleted As log_cs_methodRowChangeEventHandler
        
        Public Event log_cs_methodRowDeleting As log_cs_methodRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_methodRow(ByVal row As log_cs_methodRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_methodRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_methodRow
            Dim rowlog_cs_methodRow As log_cs_methodRow = CType(Me.NewRow,log_cs_methodRow)
            rowlog_cs_methodRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_methodRow)
            Return rowlog_cs_methodRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_methodDataTable = CType(MyBase.Clone,log_cs_methodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_methodDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_methodRow() As log_cs_methodRow
            Return CType(Me.NewRow,log_cs_methodRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_methodRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_methodRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_methodRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_methodRowChanged(Me, New log_cs_methodRowChangeEvent(CType(e.Row,log_cs_methodRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_methodRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_methodRowChanging(Me, New log_cs_methodRowChangeEvent(CType(e.Row,log_cs_methodRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_methodRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_methodRowDeleted(Me, New log_cs_methodRowChangeEvent(CType(e.Row,log_cs_methodRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_methodRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_methodRowDeleting(Me, New log_cs_methodRowChangeEvent(CType(e.Row,log_cs_methodRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_methodRow(ByVal row As log_cs_methodRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_methodRow
        Inherits DataRow
        
        Private tablelog_cs_method As log_cs_methodDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_method = CType(Me.Table,log_cs_methodDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_method.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_method.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_method.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_method.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_method.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_method.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_method.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_method.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_methodRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_methodRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_methodRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_methodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_uri_stemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_uri_stem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_uri_stemRow
            Get
                Return CType(Me.Rows(index),log_cs_uri_stemRow)
            End Get
        End Property
        
        Public Event log_cs_uri_stemRowChanged As log_cs_uri_stemRowChangeEventHandler
        
        Public Event log_cs_uri_stemRowChanging As log_cs_uri_stemRowChangeEventHandler
        
        Public Event log_cs_uri_stemRowDeleted As log_cs_uri_stemRowChangeEventHandler
        
        Public Event log_cs_uri_stemRowDeleting As log_cs_uri_stemRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_uri_stemRow(ByVal row As log_cs_uri_stemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_uri_stemRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_uri_stemRow
            Dim rowlog_cs_uri_stemRow As log_cs_uri_stemRow = CType(Me.NewRow,log_cs_uri_stemRow)
            rowlog_cs_uri_stemRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_uri_stemRow)
            Return rowlog_cs_uri_stemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_uri_stemDataTable = CType(MyBase.Clone,log_cs_uri_stemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_uri_stemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_uri_stemRow() As log_cs_uri_stemRow
            Return CType(Me.NewRow,log_cs_uri_stemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_uri_stemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_uri_stemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_uri_stemRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_stemRowChanged(Me, New log_cs_uri_stemRowChangeEvent(CType(e.Row,log_cs_uri_stemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_uri_stemRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_stemRowChanging(Me, New log_cs_uri_stemRowChangeEvent(CType(e.Row,log_cs_uri_stemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_uri_stemRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_stemRowDeleted(Me, New log_cs_uri_stemRowChangeEvent(CType(e.Row,log_cs_uri_stemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_uri_stemRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_stemRowDeleting(Me, New log_cs_uri_stemRowChangeEvent(CType(e.Row,log_cs_uri_stemRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_uri_stemRow(ByVal row As log_cs_uri_stemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_uri_stemRow
        Inherits DataRow
        
        Private tablelog_cs_uri_stem As log_cs_uri_stemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_uri_stem = CType(Me.Table,log_cs_uri_stemDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_uri_stem.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_uri_stem.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_uri_stem.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_uri_stem.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_uri_stem.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_uri_stem.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_uri_stem.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_uri_stem.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_uri_stemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_uri_stemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_uri_stemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_uri_stemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_uri_queryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_uri_query")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_uri_queryRow
            Get
                Return CType(Me.Rows(index),log_cs_uri_queryRow)
            End Get
        End Property
        
        Public Event log_cs_uri_queryRowChanged As log_cs_uri_queryRowChangeEventHandler
        
        Public Event log_cs_uri_queryRowChanging As log_cs_uri_queryRowChangeEventHandler
        
        Public Event log_cs_uri_queryRowDeleted As log_cs_uri_queryRowChangeEventHandler
        
        Public Event log_cs_uri_queryRowDeleting As log_cs_uri_queryRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_uri_queryRow(ByVal row As log_cs_uri_queryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_uri_queryRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_uri_queryRow
            Dim rowlog_cs_uri_queryRow As log_cs_uri_queryRow = CType(Me.NewRow,log_cs_uri_queryRow)
            rowlog_cs_uri_queryRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_uri_queryRow)
            Return rowlog_cs_uri_queryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_uri_queryDataTable = CType(MyBase.Clone,log_cs_uri_queryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_uri_queryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_uri_queryRow() As log_cs_uri_queryRow
            Return CType(Me.NewRow,log_cs_uri_queryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_uri_queryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_uri_queryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_uri_queryRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_queryRowChanged(Me, New log_cs_uri_queryRowChangeEvent(CType(e.Row,log_cs_uri_queryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_uri_queryRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_queryRowChanging(Me, New log_cs_uri_queryRowChangeEvent(CType(e.Row,log_cs_uri_queryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_uri_queryRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_queryRowDeleted(Me, New log_cs_uri_queryRowChangeEvent(CType(e.Row,log_cs_uri_queryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_uri_queryRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_uri_queryRowDeleting(Me, New log_cs_uri_queryRowChangeEvent(CType(e.Row,log_cs_uri_queryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_uri_queryRow(ByVal row As log_cs_uri_queryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_uri_queryRow
        Inherits DataRow
        
        Private tablelog_cs_uri_query As log_cs_uri_queryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_uri_query = CType(Me.Table,log_cs_uri_queryDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_uri_query.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_uri_query.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_uri_query.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_uri_query.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_uri_query.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_uri_query.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_uri_query.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_uri_query.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_uri_queryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_uri_queryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_uri_queryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_uri_queryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_portDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_s_port")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_s_portRow
            Get
                Return CType(Me.Rows(index),log_s_portRow)
            End Get
        End Property
        
        Public Event log_s_portRowChanged As log_s_portRowChangeEventHandler
        
        Public Event log_s_portRowChanging As log_s_portRowChangeEventHandler
        
        Public Event log_s_portRowDeleted As log_s_portRowChangeEventHandler
        
        Public Event log_s_portRowDeleting As log_s_portRowChangeEventHandler
        
        Public Overloads Sub Addlog_s_portRow(ByVal row As log_s_portRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_s_portRow(ByVal log_value As String, ByVal log_count As Integer) As log_s_portRow
            Dim rowlog_s_portRow As log_s_portRow = CType(Me.NewRow,log_s_portRow)
            rowlog_s_portRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_s_portRow)
            Return rowlog_s_portRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_s_portDataTable = CType(MyBase.Clone,log_s_portDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_s_portDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_s_portRow() As log_s_portRow
            Return CType(Me.NewRow,log_s_portRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_s_portRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_s_portRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_s_portRowChangedEvent) Is Nothing) Then
                RaiseEvent log_s_portRowChanged(Me, New log_s_portRowChangeEvent(CType(e.Row,log_s_portRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_s_portRowChangingEvent) Is Nothing) Then
                RaiseEvent log_s_portRowChanging(Me, New log_s_portRowChangeEvent(CType(e.Row,log_s_portRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_s_portRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_s_portRowDeleted(Me, New log_s_portRowChangeEvent(CType(e.Row,log_s_portRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_s_portRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_s_portRowDeleting(Me, New log_s_portRowChangeEvent(CType(e.Row,log_s_portRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_s_portRow(ByVal row As log_s_portRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_portRow
        Inherits DataRow
        
        Private tablelog_s_port As log_s_portDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_s_port = CType(Me.Table,log_s_portDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_port.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_port.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_s_port.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_s_port.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_port.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_s_port.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_s_port.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_s_port.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_s_portRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_s_portRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_s_portRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_s_portRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_usernameDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_username")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_usernameRow
            Get
                Return CType(Me.Rows(index),log_cs_usernameRow)
            End Get
        End Property
        
        Public Event log_cs_usernameRowChanged As log_cs_usernameRowChangeEventHandler
        
        Public Event log_cs_usernameRowChanging As log_cs_usernameRowChangeEventHandler
        
        Public Event log_cs_usernameRowDeleted As log_cs_usernameRowChangeEventHandler
        
        Public Event log_cs_usernameRowDeleting As log_cs_usernameRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_usernameRow(ByVal row As log_cs_usernameRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_usernameRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_usernameRow
            Dim rowlog_cs_usernameRow As log_cs_usernameRow = CType(Me.NewRow,log_cs_usernameRow)
            rowlog_cs_usernameRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_usernameRow)
            Return rowlog_cs_usernameRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_usernameDataTable = CType(MyBase.Clone,log_cs_usernameDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_usernameDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_usernameRow() As log_cs_usernameRow
            Return CType(Me.NewRow,log_cs_usernameRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_usernameRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_usernameRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_usernameRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_usernameRowChanged(Me, New log_cs_usernameRowChangeEvent(CType(e.Row,log_cs_usernameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_usernameRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_usernameRowChanging(Me, New log_cs_usernameRowChangeEvent(CType(e.Row,log_cs_usernameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_usernameRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_usernameRowDeleted(Me, New log_cs_usernameRowChangeEvent(CType(e.Row,log_cs_usernameRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_usernameRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_usernameRowDeleting(Me, New log_cs_usernameRowChangeEvent(CType(e.Row,log_cs_usernameRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_usernameRow(ByVal row As log_cs_usernameRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_usernameRow
        Inherits DataRow
        
        Private tablelog_cs_username As log_cs_usernameDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_username = CType(Me.Table,log_cs_usernameDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_username.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_username.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_username.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_username.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_username.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_username.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_username.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_username.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_usernameRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_usernameRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_usernameRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_usernameRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_c_ipDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_c_ip")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_c_ipRow
            Get
                Return CType(Me.Rows(index),log_c_ipRow)
            End Get
        End Property
        
        Public Event log_c_ipRowChanged As log_c_ipRowChangeEventHandler
        
        Public Event log_c_ipRowChanging As log_c_ipRowChangeEventHandler
        
        Public Event log_c_ipRowDeleted As log_c_ipRowChangeEventHandler
        
        Public Event log_c_ipRowDeleting As log_c_ipRowChangeEventHandler
        
        Public Overloads Sub Addlog_c_ipRow(ByVal row As log_c_ipRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_c_ipRow(ByVal log_value As String, ByVal log_count As Integer) As log_c_ipRow
            Dim rowlog_c_ipRow As log_c_ipRow = CType(Me.NewRow,log_c_ipRow)
            rowlog_c_ipRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_c_ipRow)
            Return rowlog_c_ipRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_c_ipDataTable = CType(MyBase.Clone,log_c_ipDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_c_ipDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_c_ipRow() As log_c_ipRow
            Return CType(Me.NewRow,log_c_ipRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_c_ipRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_c_ipRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_c_ipRowChangedEvent) Is Nothing) Then
                RaiseEvent log_c_ipRowChanged(Me, New log_c_ipRowChangeEvent(CType(e.Row,log_c_ipRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_c_ipRowChangingEvent) Is Nothing) Then
                RaiseEvent log_c_ipRowChanging(Me, New log_c_ipRowChangeEvent(CType(e.Row,log_c_ipRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_c_ipRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_c_ipRowDeleted(Me, New log_c_ipRowChangeEvent(CType(e.Row,log_c_ipRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_c_ipRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_c_ipRowDeleting(Me, New log_c_ipRowChangeEvent(CType(e.Row,log_c_ipRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_c_ipRow(ByVal row As log_c_ipRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_c_ipRow
        Inherits DataRow
        
        Private tablelog_c_ip As log_c_ipDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_c_ip = CType(Me.Table,log_c_ipDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_c_ip.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_c_ip.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_c_ip.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_c_ip.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_c_ip.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_c_ip.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_c_ip.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_c_ip.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_c_ipRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_c_ipRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_c_ipRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_c_ipRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_versionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_version")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_versionRow
            Get
                Return CType(Me.Rows(index),log_cs_versionRow)
            End Get
        End Property
        
        Public Event log_cs_versionRowChanged As log_cs_versionRowChangeEventHandler
        
        Public Event log_cs_versionRowChanging As log_cs_versionRowChangeEventHandler
        
        Public Event log_cs_versionRowDeleted As log_cs_versionRowChangeEventHandler
        
        Public Event log_cs_versionRowDeleting As log_cs_versionRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_versionRow(ByVal row As log_cs_versionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_versionRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_versionRow
            Dim rowlog_cs_versionRow As log_cs_versionRow = CType(Me.NewRow,log_cs_versionRow)
            rowlog_cs_versionRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_versionRow)
            Return rowlog_cs_versionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_versionDataTable = CType(MyBase.Clone,log_cs_versionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_versionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_versionRow() As log_cs_versionRow
            Return CType(Me.NewRow,log_cs_versionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_versionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_versionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_versionRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_versionRowChanged(Me, New log_cs_versionRowChangeEvent(CType(e.Row,log_cs_versionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_versionRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_versionRowChanging(Me, New log_cs_versionRowChangeEvent(CType(e.Row,log_cs_versionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_versionRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_versionRowDeleted(Me, New log_cs_versionRowChangeEvent(CType(e.Row,log_cs_versionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_versionRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_versionRowDeleting(Me, New log_cs_versionRowChangeEvent(CType(e.Row,log_cs_versionRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_versionRow(ByVal row As log_cs_versionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_versionRow
        Inherits DataRow
        
        Private tablelog_cs_version As log_cs_versionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_version = CType(Me.Table,log_cs_versionDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_version.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_version.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_version.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_version.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_version.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_version.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_version.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_version.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_versionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_versionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_versionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_versionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_User_AgentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_User_Agent")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_User_AgentRow
            Get
                Return CType(Me.Rows(index),log_cs_User_AgentRow)
            End Get
        End Property
        
        Public Event log_cs_User_AgentRowChanged As log_cs_User_AgentRowChangeEventHandler
        
        Public Event log_cs_User_AgentRowChanging As log_cs_User_AgentRowChangeEventHandler
        
        Public Event log_cs_User_AgentRowDeleted As log_cs_User_AgentRowChangeEventHandler
        
        Public Event log_cs_User_AgentRowDeleting As log_cs_User_AgentRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_User_AgentRow(ByVal row As log_cs_User_AgentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_User_AgentRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_User_AgentRow
            Dim rowlog_cs_User_AgentRow As log_cs_User_AgentRow = CType(Me.NewRow,log_cs_User_AgentRow)
            rowlog_cs_User_AgentRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_User_AgentRow)
            Return rowlog_cs_User_AgentRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_User_AgentDataTable = CType(MyBase.Clone,log_cs_User_AgentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_User_AgentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_User_AgentRow() As log_cs_User_AgentRow
            Return CType(Me.NewRow,log_cs_User_AgentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_User_AgentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_User_AgentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_User_AgentRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_User_AgentRowChanged(Me, New log_cs_User_AgentRowChangeEvent(CType(e.Row,log_cs_User_AgentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_User_AgentRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_User_AgentRowChanging(Me, New log_cs_User_AgentRowChangeEvent(CType(e.Row,log_cs_User_AgentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_User_AgentRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_User_AgentRowDeleted(Me, New log_cs_User_AgentRowChangeEvent(CType(e.Row,log_cs_User_AgentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_User_AgentRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_User_AgentRowDeleting(Me, New log_cs_User_AgentRowChangeEvent(CType(e.Row,log_cs_User_AgentRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_User_AgentRow(ByVal row As log_cs_User_AgentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_User_AgentRow
        Inherits DataRow
        
        Private tablelog_cs_User_Agent As log_cs_User_AgentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_User_Agent = CType(Me.Table,log_cs_User_AgentDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_User_Agent.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_User_Agent.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_User_Agent.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_User_Agent.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_User_Agent.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_User_Agent.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_User_Agent.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_User_Agent.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_User_AgentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_User_AgentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_User_AgentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_User_AgentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_CookieDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_Cookie")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_CookieRow
            Get
                Return CType(Me.Rows(index),log_cs_CookieRow)
            End Get
        End Property
        
        Public Event log_cs_CookieRowChanged As log_cs_CookieRowChangeEventHandler
        
        Public Event log_cs_CookieRowChanging As log_cs_CookieRowChangeEventHandler
        
        Public Event log_cs_CookieRowDeleted As log_cs_CookieRowChangeEventHandler
        
        Public Event log_cs_CookieRowDeleting As log_cs_CookieRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_CookieRow(ByVal row As log_cs_CookieRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_CookieRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_CookieRow
            Dim rowlog_cs_CookieRow As log_cs_CookieRow = CType(Me.NewRow,log_cs_CookieRow)
            rowlog_cs_CookieRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_CookieRow)
            Return rowlog_cs_CookieRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_CookieDataTable = CType(MyBase.Clone,log_cs_CookieDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_CookieDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_CookieRow() As log_cs_CookieRow
            Return CType(Me.NewRow,log_cs_CookieRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_CookieRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_CookieRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_CookieRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_CookieRowChanged(Me, New log_cs_CookieRowChangeEvent(CType(e.Row,log_cs_CookieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_CookieRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_CookieRowChanging(Me, New log_cs_CookieRowChangeEvent(CType(e.Row,log_cs_CookieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_CookieRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_CookieRowDeleted(Me, New log_cs_CookieRowChangeEvent(CType(e.Row,log_cs_CookieRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_CookieRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_CookieRowDeleting(Me, New log_cs_CookieRowChangeEvent(CType(e.Row,log_cs_CookieRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_CookieRow(ByVal row As log_cs_CookieRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_CookieRow
        Inherits DataRow
        
        Private tablelog_cs_Cookie As log_cs_CookieDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_Cookie = CType(Me.Table,log_cs_CookieDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_Cookie.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_Cookie.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_Cookie.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_Cookie.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_Cookie.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_Cookie.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_Cookie.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_Cookie.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_CookieRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_CookieRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_CookieRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_CookieRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_RefererDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_Referer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_RefererRow
            Get
                Return CType(Me.Rows(index),log_cs_RefererRow)
            End Get
        End Property
        
        Public Event log_cs_RefererRowChanged As log_cs_RefererRowChangeEventHandler
        
        Public Event log_cs_RefererRowChanging As log_cs_RefererRowChangeEventHandler
        
        Public Event log_cs_RefererRowDeleted As log_cs_RefererRowChangeEventHandler
        
        Public Event log_cs_RefererRowDeleting As log_cs_RefererRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_RefererRow(ByVal row As log_cs_RefererRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_RefererRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_RefererRow
            Dim rowlog_cs_RefererRow As log_cs_RefererRow = CType(Me.NewRow,log_cs_RefererRow)
            rowlog_cs_RefererRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_RefererRow)
            Return rowlog_cs_RefererRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_RefererDataTable = CType(MyBase.Clone,log_cs_RefererDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_RefererDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_RefererRow() As log_cs_RefererRow
            Return CType(Me.NewRow,log_cs_RefererRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_RefererRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_RefererRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_RefererRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_RefererRowChanged(Me, New log_cs_RefererRowChangeEvent(CType(e.Row,log_cs_RefererRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_RefererRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_RefererRowChanging(Me, New log_cs_RefererRowChangeEvent(CType(e.Row,log_cs_RefererRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_RefererRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_RefererRowDeleted(Me, New log_cs_RefererRowChangeEvent(CType(e.Row,log_cs_RefererRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_RefererRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_RefererRowDeleting(Me, New log_cs_RefererRowChangeEvent(CType(e.Row,log_cs_RefererRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_RefererRow(ByVal row As log_cs_RefererRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_RefererRow
        Inherits DataRow
        
        Private tablelog_cs_Referer As log_cs_RefererDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_Referer = CType(Me.Table,log_cs_RefererDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_Referer.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_Referer.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_Referer.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_Referer.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_Referer.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_Referer.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_Referer.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_Referer.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_RefererRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_RefererRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_RefererRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_RefererRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_hostDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_host")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_hostRow
            Get
                Return CType(Me.Rows(index),log_cs_hostRow)
            End Get
        End Property
        
        Public Event log_cs_hostRowChanged As log_cs_hostRowChangeEventHandler
        
        Public Event log_cs_hostRowChanging As log_cs_hostRowChangeEventHandler
        
        Public Event log_cs_hostRowDeleted As log_cs_hostRowChangeEventHandler
        
        Public Event log_cs_hostRowDeleting As log_cs_hostRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_hostRow(ByVal row As log_cs_hostRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_hostRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_hostRow
            Dim rowlog_cs_hostRow As log_cs_hostRow = CType(Me.NewRow,log_cs_hostRow)
            rowlog_cs_hostRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_hostRow)
            Return rowlog_cs_hostRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_hostDataTable = CType(MyBase.Clone,log_cs_hostDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_hostDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_hostRow() As log_cs_hostRow
            Return CType(Me.NewRow,log_cs_hostRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_hostRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_hostRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_hostRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_hostRowChanged(Me, New log_cs_hostRowChangeEvent(CType(e.Row,log_cs_hostRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_hostRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_hostRowChanging(Me, New log_cs_hostRowChangeEvent(CType(e.Row,log_cs_hostRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_hostRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_hostRowDeleted(Me, New log_cs_hostRowChangeEvent(CType(e.Row,log_cs_hostRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_hostRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_hostRowDeleting(Me, New log_cs_hostRowChangeEvent(CType(e.Row,log_cs_hostRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_hostRow(ByVal row As log_cs_hostRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_hostRow
        Inherits DataRow
        
        Private tablelog_cs_host As log_cs_hostDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_host = CType(Me.Table,log_cs_hostDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_host.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_host.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_host.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_host.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_host.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_host.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_host.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_host.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_hostRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_hostRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_hostRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_hostRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_statusDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_sc_status")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_sc_statusRow
            Get
                Return CType(Me.Rows(index),log_sc_statusRow)
            End Get
        End Property
        
        Public Event log_sc_statusRowChanged As log_sc_statusRowChangeEventHandler
        
        Public Event log_sc_statusRowChanging As log_sc_statusRowChangeEventHandler
        
        Public Event log_sc_statusRowDeleted As log_sc_statusRowChangeEventHandler
        
        Public Event log_sc_statusRowDeleting As log_sc_statusRowChangeEventHandler
        
        Public Overloads Sub Addlog_sc_statusRow(ByVal row As log_sc_statusRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_sc_statusRow(ByVal log_value As String, ByVal log_count As Integer) As log_sc_statusRow
            Dim rowlog_sc_statusRow As log_sc_statusRow = CType(Me.NewRow,log_sc_statusRow)
            rowlog_sc_statusRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_sc_statusRow)
            Return rowlog_sc_statusRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_sc_statusDataTable = CType(MyBase.Clone,log_sc_statusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_sc_statusDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_sc_statusRow() As log_sc_statusRow
            Return CType(Me.NewRow,log_sc_statusRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_sc_statusRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_sc_statusRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_sc_statusRowChangedEvent) Is Nothing) Then
                RaiseEvent log_sc_statusRowChanged(Me, New log_sc_statusRowChangeEvent(CType(e.Row,log_sc_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_sc_statusRowChangingEvent) Is Nothing) Then
                RaiseEvent log_sc_statusRowChanging(Me, New log_sc_statusRowChangeEvent(CType(e.Row,log_sc_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_sc_statusRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_sc_statusRowDeleted(Me, New log_sc_statusRowChangeEvent(CType(e.Row,log_sc_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_sc_statusRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_sc_statusRowDeleting(Me, New log_sc_statusRowChangeEvent(CType(e.Row,log_sc_statusRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_sc_statusRow(ByVal row As log_sc_statusRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_statusRow
        Inherits DataRow
        
        Private tablelog_sc_status As log_sc_statusDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_sc_status = CType(Me.Table,log_sc_statusDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_status.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_status.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_status.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_status.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_status.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_sc_status.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_status.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_sc_status.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_statusRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_sc_statusRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_sc_statusRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_sc_statusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_substatusDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_sc_substatus")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_sc_substatusRow
            Get
                Return CType(Me.Rows(index),log_sc_substatusRow)
            End Get
        End Property
        
        Public Event log_sc_substatusRowChanged As log_sc_substatusRowChangeEventHandler
        
        Public Event log_sc_substatusRowChanging As log_sc_substatusRowChangeEventHandler
        
        Public Event log_sc_substatusRowDeleted As log_sc_substatusRowChangeEventHandler
        
        Public Event log_sc_substatusRowDeleting As log_sc_substatusRowChangeEventHandler
        
        Public Overloads Sub Addlog_sc_substatusRow(ByVal row As log_sc_substatusRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_sc_substatusRow(ByVal log_value As String, ByVal log_count As Integer) As log_sc_substatusRow
            Dim rowlog_sc_substatusRow As log_sc_substatusRow = CType(Me.NewRow,log_sc_substatusRow)
            rowlog_sc_substatusRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_sc_substatusRow)
            Return rowlog_sc_substatusRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_sc_substatusDataTable = CType(MyBase.Clone,log_sc_substatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_sc_substatusDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_sc_substatusRow() As log_sc_substatusRow
            Return CType(Me.NewRow,log_sc_substatusRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_sc_substatusRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_sc_substatusRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_sc_substatusRowChangedEvent) Is Nothing) Then
                RaiseEvent log_sc_substatusRowChanged(Me, New log_sc_substatusRowChangeEvent(CType(e.Row,log_sc_substatusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_sc_substatusRowChangingEvent) Is Nothing) Then
                RaiseEvent log_sc_substatusRowChanging(Me, New log_sc_substatusRowChangeEvent(CType(e.Row,log_sc_substatusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_sc_substatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_sc_substatusRowDeleted(Me, New log_sc_substatusRowChangeEvent(CType(e.Row,log_sc_substatusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_sc_substatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_sc_substatusRowDeleting(Me, New log_sc_substatusRowChangeEvent(CType(e.Row,log_sc_substatusRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_sc_substatusRow(ByVal row As log_sc_substatusRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_substatusRow
        Inherits DataRow
        
        Private tablelog_sc_substatus As log_sc_substatusDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_sc_substatus = CType(Me.Table,log_sc_substatusDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_substatus.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_substatus.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_substatus.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_substatus.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_substatus.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_sc_substatus.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_substatus.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_sc_substatus.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_substatusRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_sc_substatusRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_sc_substatusRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_sc_substatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_win32_statusDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_sc_win32_status")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_sc_win32_statusRow
            Get
                Return CType(Me.Rows(index),log_sc_win32_statusRow)
            End Get
        End Property
        
        Public Event log_sc_win32_statusRowChanged As log_sc_win32_statusRowChangeEventHandler
        
        Public Event log_sc_win32_statusRowChanging As log_sc_win32_statusRowChangeEventHandler
        
        Public Event log_sc_win32_statusRowDeleted As log_sc_win32_statusRowChangeEventHandler
        
        Public Event log_sc_win32_statusRowDeleting As log_sc_win32_statusRowChangeEventHandler
        
        Public Overloads Sub Addlog_sc_win32_statusRow(ByVal row As log_sc_win32_statusRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_sc_win32_statusRow(ByVal log_value As String, ByVal log_count As Integer) As log_sc_win32_statusRow
            Dim rowlog_sc_win32_statusRow As log_sc_win32_statusRow = CType(Me.NewRow,log_sc_win32_statusRow)
            rowlog_sc_win32_statusRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_sc_win32_statusRow)
            Return rowlog_sc_win32_statusRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_sc_win32_statusDataTable = CType(MyBase.Clone,log_sc_win32_statusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_sc_win32_statusDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_sc_win32_statusRow() As log_sc_win32_statusRow
            Return CType(Me.NewRow,log_sc_win32_statusRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_sc_win32_statusRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_sc_win32_statusRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_sc_win32_statusRowChangedEvent) Is Nothing) Then
                RaiseEvent log_sc_win32_statusRowChanged(Me, New log_sc_win32_statusRowChangeEvent(CType(e.Row,log_sc_win32_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_sc_win32_statusRowChangingEvent) Is Nothing) Then
                RaiseEvent log_sc_win32_statusRowChanging(Me, New log_sc_win32_statusRowChangeEvent(CType(e.Row,log_sc_win32_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_sc_win32_statusRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_sc_win32_statusRowDeleted(Me, New log_sc_win32_statusRowChangeEvent(CType(e.Row,log_sc_win32_statusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_sc_win32_statusRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_sc_win32_statusRowDeleting(Me, New log_sc_win32_statusRowChangeEvent(CType(e.Row,log_sc_win32_statusRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_sc_win32_statusRow(ByVal row As log_sc_win32_statusRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_win32_statusRow
        Inherits DataRow
        
        Private tablelog_sc_win32_status As log_sc_win32_statusDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_sc_win32_status = CType(Me.Table,log_sc_win32_statusDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_win32_status.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_win32_status.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_win32_status.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_win32_status.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_win32_status.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_sc_win32_status.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_win32_status.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_sc_win32_status.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_win32_statusRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_sc_win32_statusRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_sc_win32_statusRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_sc_win32_statusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_bytesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_sc_bytes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_sc_bytesRow
            Get
                Return CType(Me.Rows(index),log_sc_bytesRow)
            End Get
        End Property
        
        Public Event log_sc_bytesRowChanged As log_sc_bytesRowChangeEventHandler
        
        Public Event log_sc_bytesRowChanging As log_sc_bytesRowChangeEventHandler
        
        Public Event log_sc_bytesRowDeleted As log_sc_bytesRowChangeEventHandler
        
        Public Event log_sc_bytesRowDeleting As log_sc_bytesRowChangeEventHandler
        
        Public Overloads Sub Addlog_sc_bytesRow(ByVal row As log_sc_bytesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_sc_bytesRow(ByVal log_value As String, ByVal log_count As Integer) As log_sc_bytesRow
            Dim rowlog_sc_bytesRow As log_sc_bytesRow = CType(Me.NewRow,log_sc_bytesRow)
            rowlog_sc_bytesRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_sc_bytesRow)
            Return rowlog_sc_bytesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_sc_bytesDataTable = CType(MyBase.Clone,log_sc_bytesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_sc_bytesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_sc_bytesRow() As log_sc_bytesRow
            Return CType(Me.NewRow,log_sc_bytesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_sc_bytesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_sc_bytesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_sc_bytesRowChangedEvent) Is Nothing) Then
                RaiseEvent log_sc_bytesRowChanged(Me, New log_sc_bytesRowChangeEvent(CType(e.Row,log_sc_bytesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_sc_bytesRowChangingEvent) Is Nothing) Then
                RaiseEvent log_sc_bytesRowChanging(Me, New log_sc_bytesRowChangeEvent(CType(e.Row,log_sc_bytesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_sc_bytesRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_sc_bytesRowDeleted(Me, New log_sc_bytesRowChangeEvent(CType(e.Row,log_sc_bytesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_sc_bytesRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_sc_bytesRowDeleting(Me, New log_sc_bytesRowChangeEvent(CType(e.Row,log_sc_bytesRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_sc_bytesRow(ByVal row As log_sc_bytesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_bytesRow
        Inherits DataRow
        
        Private tablelog_sc_bytes As log_sc_bytesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_sc_bytes = CType(Me.Table,log_sc_bytesDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_bytes.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_bytes.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_sc_bytes.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_sc_bytes.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_bytes.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_sc_bytes.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_sc_bytes.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_sc_bytes.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_sc_bytesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_sc_bytesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_sc_bytesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_sc_bytesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_bytesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_cs_bytes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_cs_bytesRow
            Get
                Return CType(Me.Rows(index),log_cs_bytesRow)
            End Get
        End Property
        
        Public Event log_cs_bytesRowChanged As log_cs_bytesRowChangeEventHandler
        
        Public Event log_cs_bytesRowChanging As log_cs_bytesRowChangeEventHandler
        
        Public Event log_cs_bytesRowDeleted As log_cs_bytesRowChangeEventHandler
        
        Public Event log_cs_bytesRowDeleting As log_cs_bytesRowChangeEventHandler
        
        Public Overloads Sub Addlog_cs_bytesRow(ByVal row As log_cs_bytesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_cs_bytesRow(ByVal log_value As String, ByVal log_count As Integer) As log_cs_bytesRow
            Dim rowlog_cs_bytesRow As log_cs_bytesRow = CType(Me.NewRow,log_cs_bytesRow)
            rowlog_cs_bytesRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_cs_bytesRow)
            Return rowlog_cs_bytesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_cs_bytesDataTable = CType(MyBase.Clone,log_cs_bytesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_cs_bytesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_cs_bytesRow() As log_cs_bytesRow
            Return CType(Me.NewRow,log_cs_bytesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_cs_bytesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_cs_bytesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_cs_bytesRowChangedEvent) Is Nothing) Then
                RaiseEvent log_cs_bytesRowChanged(Me, New log_cs_bytesRowChangeEvent(CType(e.Row,log_cs_bytesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_cs_bytesRowChangingEvent) Is Nothing) Then
                RaiseEvent log_cs_bytesRowChanging(Me, New log_cs_bytesRowChangeEvent(CType(e.Row,log_cs_bytesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_cs_bytesRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_cs_bytesRowDeleted(Me, New log_cs_bytesRowChangeEvent(CType(e.Row,log_cs_bytesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_cs_bytesRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_cs_bytesRowDeleting(Me, New log_cs_bytesRowChangeEvent(CType(e.Row,log_cs_bytesRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_cs_bytesRow(ByVal row As log_cs_bytesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_bytesRow
        Inherits DataRow
        
        Private tablelog_cs_bytes As log_cs_bytesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_cs_bytes = CType(Me.Table,log_cs_bytesDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_bytes.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_bytes.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_cs_bytes.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_cs_bytes.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_bytes.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_cs_bytes.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_cs_bytes.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_cs_bytes.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_cs_bytesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_cs_bytesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_cs_bytesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_cs_bytesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_time_takenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Private columnlog_count As DataColumn
        
        Friend Sub New()
            MyBase.New("log_time_taken")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Friend ReadOnly Property log_countColumn As DataColumn
            Get
                Return Me.columnlog_count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_time_takenRow
            Get
                Return CType(Me.Rows(index),log_time_takenRow)
            End Get
        End Property
        
        Public Event log_time_takenRowChanged As log_time_takenRowChangeEventHandler
        
        Public Event log_time_takenRowChanging As log_time_takenRowChangeEventHandler
        
        Public Event log_time_takenRowDeleted As log_time_takenRowChangeEventHandler
        
        Public Event log_time_takenRowDeleting As log_time_takenRowChangeEventHandler
        
        Public Overloads Sub Addlog_time_takenRow(ByVal row As log_time_takenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_time_takenRow(ByVal log_value As String, ByVal log_count As Integer) As log_time_takenRow
            Dim rowlog_time_takenRow As log_time_takenRow = CType(Me.NewRow,log_time_takenRow)
            rowlog_time_takenRow.ItemArray = New Object() {log_value, log_count}
            Me.Rows.Add(rowlog_time_takenRow)
            Return rowlog_time_takenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_time_takenDataTable = CType(MyBase.Clone,log_time_takenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_time_takenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
            Me.columnlog_count = Me.Columns("log_count")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
            Me.columnlog_count = New DataColumn("log_count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_count)
        End Sub
        
        Public Function Newlog_time_takenRow() As log_time_takenRow
            Return CType(Me.NewRow,log_time_takenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_time_takenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_time_takenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_time_takenRowChangedEvent) Is Nothing) Then
                RaiseEvent log_time_takenRowChanged(Me, New log_time_takenRowChangeEvent(CType(e.Row,log_time_takenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_time_takenRowChangingEvent) Is Nothing) Then
                RaiseEvent log_time_takenRowChanging(Me, New log_time_takenRowChangeEvent(CType(e.Row,log_time_takenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_time_takenRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_time_takenRowDeleted(Me, New log_time_takenRowChangeEvent(CType(e.Row,log_time_takenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_time_takenRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_time_takenRowDeleting(Me, New log_time_takenRowChangeEvent(CType(e.Row,log_time_takenRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_time_takenRow(ByVal row As log_time_takenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_time_takenRow
        Inherits DataRow
        
        Private tablelog_time_taken As log_time_takenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_time_taken = CType(Me.Table,log_time_takenDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_time_taken.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_time_taken.log_valueColumn) = value
            End Set
        End Property
        
        Public Property log_count As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_time_taken.log_countColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_time_taken.log_countColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_time_taken.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_time_taken.log_valueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islog_countNull() As Boolean
            Return Me.IsNull(Me.tablelog_time_taken.log_countColumn)
        End Function
        
        Public Sub Setlog_countNull()
            Me(Me.tablelog_time_taken.log_countColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_time_takenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_time_takenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_time_takenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_time_takenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_errorsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlog_value As DataColumn
        
        Friend Sub New()
            MyBase.New("log_errors")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property log_valueColumn As DataColumn
            Get
                Return Me.columnlog_value
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_errorsRow
            Get
                Return CType(Me.Rows(index),log_errorsRow)
            End Get
        End Property
        
        Public Event log_errorsRowChanged As log_errorsRowChangeEventHandler
        
        Public Event log_errorsRowChanging As log_errorsRowChangeEventHandler
        
        Public Event log_errorsRowDeleted As log_errorsRowChangeEventHandler
        
        Public Event log_errorsRowDeleting As log_errorsRowChangeEventHandler
        
        Public Overloads Sub Addlog_errorsRow(ByVal row As log_errorsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addlog_errorsRow(ByVal log_value As String) As log_errorsRow
            Dim rowlog_errorsRow As log_errorsRow = CType(Me.NewRow,log_errorsRow)
            rowlog_errorsRow.ItemArray = New Object() {log_value}
            Me.Rows.Add(rowlog_errorsRow)
            Return rowlog_errorsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As log_errorsDataTable = CType(MyBase.Clone,log_errorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New log_errorsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlog_value = Me.Columns("log_value")
        End Sub
        
        Private Sub InitClass()
            Me.columnlog_value = New DataColumn("log_value", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlog_value)
        End Sub
        
        Public Function Newlog_errorsRow() As log_errorsRow
            Return CType(Me.NewRow,log_errorsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New log_errorsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_errorsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_errorsRowChangedEvent) Is Nothing) Then
                RaiseEvent log_errorsRowChanged(Me, New log_errorsRowChangeEvent(CType(e.Row,log_errorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_errorsRowChangingEvent) Is Nothing) Then
                RaiseEvent log_errorsRowChanging(Me, New log_errorsRowChangeEvent(CType(e.Row,log_errorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_errorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_errorsRowDeleted(Me, New log_errorsRowChangeEvent(CType(e.Row,log_errorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_errorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_errorsRowDeleting(Me, New log_errorsRowChangeEvent(CType(e.Row,log_errorsRow), e.Action))
            End If
        End Sub
        
        Public Sub Removelog_errorsRow(ByVal row As log_errorsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_errorsRow
        Inherits DataRow
        
        Private tablelog_errors As log_errorsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_errors = CType(Me.Table,log_errorsDataTable)
        End Sub
        
        Public Property log_value As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_errors.log_valueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_errors.log_valueColumn) = value
            End Set
        End Property
        
        Public Function Islog_valueNull() As Boolean
            Return Me.IsNull(Me.tablelog_errors.log_valueColumn)
        End Function
        
        Public Sub Setlog_valueNull()
            Me(Me.tablelog_errors.log_valueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class log_errorsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As log_errorsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As log_errorsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As log_errorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
